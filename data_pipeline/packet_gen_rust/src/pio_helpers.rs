use log::info;
use heapless::Vec;
use ieee802154::mac::{PanId, ShortAddress};
use crate::packet::PhysicalFrame;

/// get a frams to test with a given payload
///
/// # Arguments
///
/// * `payload`:
///
/// returns: Vec<u8, { MAX_FRAME_SIZE }>
///
/// # Examples
///
/// ```
/// const PAYLOAD_SIZE: usize = 4;
/// const MAX_FRAME_SIZE:usize = to_max_frame_size!(PAYLOAD_SIZE);
/// let payload: [u8; PAYLOAD_SIZE] = [0x01, 0x02, 0xA, 0xB];
/// let generated_frame_bytes = &get_testing_generated_frame_bytes::<PAYLOAD_SIZE, MAX_FRAME_SIZE>(&payload);
/// ```
fn get_testing_generated_frame_bytes<const MAX_PAYLOAD_SIZE: usize, const MAX_FRAME_SIZE: usize>(
    payload: &[u8],
) -> Vec<u8, MAX_FRAME_SIZE> {
    assert!(payload.len() <= MAX_PAYLOAD_SIZE, "payload is too big!");

    let frame: PhysicalFrame<MAX_FRAME_SIZE> = PhysicalFrame::new(
        1,
        PanId(0x4444),        // dest
        ShortAddress(0xABCD), // dest
        PanId(0x2222),        // src
        ShortAddress(0x1234), // src
        payload,
    )
    .unwrap();
    let frame_bytes = frame.to_bytes().unwrap_or_else(|err| {
        panic!(
            "Failed to convert frame to bytes, this should never happen ERR:{:?}",
            err
        );
    });
    info!("Created frame ");
    frame_bytes
}

#[allow(dead_code)]
pub fn get_random_payload_frame_bytes<const MAX_PAYLOAD_SIZE: usize, const MAX_FRAME_SIZE: usize>(
    step: usize,
    size: usize,
) -> Vec<u8, MAX_FRAME_SIZE> {
    assert!(size <= MAX_PAYLOAD_SIZE, "payload is too big!");
    const RANDOMS: [u8; 256] = [
        0x9f, 0xe4, 0xda, 0xa8, 0xcf, 0xd9, 0xf6, 0xc1, 0x34, 0xef, 0xbb, 0x71, 0xce, 0x9e, 0xa5, 0xbe, 0x5e,
        0xb5, 0x56, 0x23, 0x12, 0xde, 0xcb, 0xa9, 0xd5, 0x26, 0xe5, 0xde, 0xfa, 0xc6, 0x4d, 0x61, 0xa8, 0xe7,
        0x92, 0x1c, 0xa1, 0xf9, 0x5f, 0xaa, 0x17, 0xc9, 0xb7, 0xd8, 0x41, 0x17, 0x2c, 0x29, 0xf1, 0x3b, 0x70,
        0x88, 0xfc, 0xa3, 0xaa, 0x3d, 0xcd, 0xb8, 0x2b, 0x7b, 0x8b, 0x39, 0x03, 0xf6, 0x02, 0xed, 0x59, 0x09,
        0x33, 0xb7, 0xf6, 0xa1, 0x7e, 0x8e, 0x4d, 0x5c, 0xf9, 0x0d, 0x12, 0x4a, 0x2e, 0x11, 0x97, 0xd1, 0x9a,
        0x10, 0xdf, 0xc4, 0x84, 0x4c, 0xed, 0x48, 0x12, 0x81, 0xdd, 0xc5, 0xcb, 0x20, 0x68, 0x94, 0x6f, 0xa0,
        0x16, 0x19, 0xad, 0x20, 0x50, 0xb3, 0x0e, 0xef, 0xeb, 0x99, 0xf3, 0xcd, 0x4b, 0xb7, 0x5b, 0xda, 0x9b,
        0xa2, 0xfa, 0x08, 0xc9, 0xe3, 0x6e, 0x97, 0xb2, 0x42, 0xc1, 0x31, 0x9c, 0x88, 0x80, 0x10, 0xfb, 0x59,
        0x5e, 0xd5, 0x38, 0x0e, 0x10, 0x61, 0x7f, 0x84, 0xd0, 0x68, 0x45, 0xc1, 0x25, 0x48, 0x70, 0xf4, 0xa6,
        0x63, 0x7a, 0x4a, 0x65, 0x0b, 0x26, 0x80, 0x46, 0xe7, 0x6c, 0x47, 0x65, 0x65, 0x82, 0x43, 0x96, 0xc6,
        0x32, 0xda, 0xd9, 0x29, 0x81, 0x6f, 0x06, 0x4b, 0x30, 0xc6, 0xc2, 0x60, 0x1d, 0x7a, 0x14, 0xd0, 0xa1,
        0x03, 0x6d, 0x67, 0x75, 0xf4, 0xe0, 0x72, 0x52, 0x07, 0xd8, 0x3e, 0xf5, 0x34, 0x7b, 0x45, 0x62, 0x89,
        0x5f, 0x79, 0xd1, 0xe6, 0xf2, 0x00, 0x00, 0x96, 0xb4, 0xde, 0xfa, 0x88, 0x57, 0x69, 0x8d, 0x4e, 0x6f,
        0x63, 0x0a, 0x90, 0x6f, 0x8d, 0x94, 0x18, 0x15, 0xc2, 0x0b, 0xaa, 0x33, 0xef, 0x9c, 0x4a, 0x6e, 0x2f,
        0xe5, 0x71, 0x4d, 0x85, 0xad, 0x70, 0x95, 0x9f, 0xac, 0x94, 0x78, 0x0d, 0xb5, 0xf4, 0x9e, 0x57, 0xda,
        0xde,
    ];

    let payload_vec: Vec<u8, MAX_PAYLOAD_SIZE> =
        RANDOMS.into_iter().cycle().step_by(step).take(size).collect();

    get_testing_generated_frame_bytes::<MAX_PAYLOAD_SIZE, MAX_FRAME_SIZE>(&payload_vec)
}

pub fn get_seq_frame_bytes<const MAX_PAYLOAD_SIZE: usize, const MAX_FRAME_SIZE: usize>(
    size: usize,
) -> Vec<u8, MAX_FRAME_SIZE> {
    assert!(size <= MAX_PAYLOAD_SIZE, "payload is too big!");
    const SEQ: [u8; 256] = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21,
        0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,
        0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43,
        0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54,
        0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65,
        0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76,
        0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
        0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
        0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9,
        0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA,
        0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB,
        0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC,
        0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED,
        0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE,
        0xFF,
    ];

    let payload_vec: Vec<u8, MAX_PAYLOAD_SIZE> = SEQ.into_iter().cycle().take(size).collect();

    get_testing_generated_frame_bytes::<MAX_PAYLOAD_SIZE, MAX_FRAME_SIZE>(&payload_vec)
}
